"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8081],{1178:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2be565e4",path:"/c-array/453.%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"453.最小操作次数使数组元素相等",slug:"_453-最小操作次数使数组元素相等",children:[{level:3,title:"数学逆向思维",slug:"数学逆向思维",children:[]}]}],filePathRelative:"c-array/453.最小操作次数使数组元素相等.md",git:{updatedTime:1639667371e3,contributors:[{name:"csucjh",email:"csucjh@163.com",commits:1}]}}},3214:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="_453-最小操作次数使数组元素相等" tabindex="-1"><a class="header-anchor" href="#_453-最小操作次数使数组元素相等" aria-hidden="true">#</a> 453.最小操作次数使数组元素相等</h2><h3 id="数学逆向思维" tabindex="-1"><a class="header-anchor" href="#数学逆向思维" aria-hidden="true">#</a> 数学逆向思维</h3><p>每次操作将会使n-1个元素增加1，等价于每次操作使一个元素减1；所以题目等价于每个元素都减到最小值需要的次数</p><p>(我最开始虽然也是数学思维，但是是正向的，虽然也有公式，但是必须保证所有元素相等，因为正向操作每次是改变n-1个元素，最终只能通过一部分用例，而逆向思维变成了每次操作仅使一个元素减一，要简单很多)</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token comment">// 每次操作将会使n-1个元素增加1，等价于每次操作使一个元素减1</span>\n    <span class="token comment">// 所以题目等价于每个元素都减到最小值需要的次数</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minMoves</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            count <span class="token operator">+=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',5),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);