import{c as n}from"./app.ed6d2194.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h2 id="_541-\u53CD\u8F6C\u5B57\u7B26\u4E32ii" tabindex="-1"><a class="header-anchor" href="#_541-\u53CD\u8F6C\u5B57\u7B26\u4E32ii" aria-hidden="true">#</a> 541.\u53CD\u8F6C\u5B57\u7B26\u4E32II</h2><h3 id="\u539F\u5730\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u539F\u5730\u904D\u5386" aria-hidden="true">#</a> \u539F\u5730\u904D\u5386</h3><p>1\u3001\u6838\u5FC3\u70B9\u5728\u4E8E\u5B9A\u4F4D\u5F85\u53CD\u8F6C\u5B57\u7B26\u4E32\uFF0C\u6211\u4EEC\u4F7F\u7528left\u8868\u793A\u5F85\u53CD\u8F6C\u5B57\u7B26\u4E32\u5728\u6574\u4E2A\u5B57\u7B26\u4E32\u4E2D\u7684\u504F\u79FB\u91CF\uFF0Ck\u8868\u793A\u5F85\u53CD\u8F6C\u957F\u5EA6</p><p>2\u3001\u6BCF\u5230\u8FBE<code>2k</code>\u4E2A\u5B57\u7B26\u5F00\u59CB\u4EA4\u6362\u524Dk\u4E2A\uFF0C\u6211\u4EEC\u4F7F\u7528<code>(i+1) % (2*k) == 0</code>\u6765\u5224\u65AD\u5230\u8FBE<code>2k</code>\u957F\u5EA6\uFF0C\u7136\u540E\u5F00\u59CB\u53CD\u8F6C</p><p>3\u3001\u6700\u540E\u957F\u5EA6\u4E0D\u591F<code>2k</code>\u90E8\u5206\uFF0C\u9700\u8981\u6309\u9898\u610F\u5BF9\u6BD4\u4E0E\u4F20\u5165\u53C2\u6570k\u7684\u5927\u5C0F<code>k = Math.min(n-left, k)</code></p><p>4\u3001\u53CD\u8F6C\u4E00\u4E2A\u5B57\u7B26\u4E32\u5728\u4E8E\u627E\u5230\u5DE6\u53F3\u4E2D\u5FC3\u70B9\uFF1A\u5DE6\u4E2D\u5FC3\u70B9left_center\uFF1A<code>n/2 + n%2</code>\uFF0C\u53F3\u4E2D\u5FC3\u70B9right_center\uFF1A<code>n/2 + 1</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> charArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token comment">// \u5B9A\u4E49\u53CD\u8F6C\u533A\u95F4\u8303\u56F4\u7684\u5DE6\u6307\u9488\uFF0C\u6709\u6307\u9488\u4E0D\u9700\u8981\u6709\u957F\u5EA6\u5C31\u884C</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// \u6BCF\u5230\u8FBE2k\u4E2A\u5B57\u7B26\u5F00\u59CB\u4EA4\u6362\u524Dk\u4E2A</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                left <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token function">reverseStr</span><span class="token punctuation">(</span>charArr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// \u4EA4\u6362\u5B8C\u6BD5\uFF0Cleft\u524D\u79FB\uFF0Cright\u590D\u4F4D</span>
                left <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// \u5269\u4F59\u5B57\u7B26\u5927\u4E8E\u6216\u7B49\u4E8Ek\u4E2A,\u53CD\u8F6C\u524Dk\u4E2A\u5B57\u7B26</span>
            <span class="token comment">// \u5269\u4F59\u5B57\u7B26\u5C11\u4E8Ek\u4E2A,\u5C06\u5269\u4F59\u5B57\u7B26\u5168\u90E8\u53CD\u8F6C</span>
            k <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token operator">-</span>left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">reverseStr</span><span class="token punctuation">(</span>charArr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u53CD\u8F6C[left, left + k)\u533A\u95F4\u5185\u5171k\u4E2A\u5B57\u7B26</span>
    <span class="token comment">// \u5B9E\u9645\u4E0A\u662F\u53CD\u8F6C\u957F\u5EA6\u4E3Ak\u7684\u5B50\u6570\u7EC4\uFF0C\u76F8\u5BF9\u4E8E\u539F\u6570\u7EC4\u7684\u504F\u79FB\u91CF\u4E3Aleft</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5B9A\u4E49\u533A\u95F4\u8303\u56F4\u5185\u4E2D\u5FC3\u70B9</span>
        <span class="token keyword">int</span> left_center <span class="token operator">=</span> k<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> k<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span> right_center <span class="token operator">=</span> k<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> left_center<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// \u8FD9\u91CC\u5BF9\u4EA4\u6362\u524D(before)\u540E(after)\u5143\u7D20\u52A0\u4E0A\u504F\u79FB\u91CFleft</span>
            <span class="token keyword">int</span> before <span class="token operator">=</span> i<span class="token operator">+</span>left<span class="token punctuation">,</span> after <span class="token operator">=</span> k<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>left<span class="token punctuation">;</span>
            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>before<span class="token punctuation">]</span><span class="token punctuation">;</span>
            s<span class="token punctuation">[</span>before<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>after<span class="token punctuation">]</span><span class="token punctuation">;</span>
            s<span class="token punctuation">[</span>after<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div>`,7);function t(e,o){return p}var r=s(a,[["render",t]]);export{r as default};
