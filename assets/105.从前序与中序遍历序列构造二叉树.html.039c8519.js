import{c as n}from"./app.d88f1bcd.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h2 id="_105-\u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#_105-\u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811" aria-hidden="true">#</a> [105] \u4ECE\u524D\u5E8F\u4E0E\u4E2D\u5E8F\u904D\u5386\u5E8F\u5217\u6784\u9020\u4E8C\u53C9\u6811</h2><p>\u672C\u9898\u601D\u8DEF\u5C31\u662F\u786E\u5B9A\u6839\u8282\u70B9\u5E94\u8BE5\u505A\u4EC0\u4E48\uFF1F</p><p>1\u3001\u6839\u8282\u70B9\u8981\u505A\u7684\u5C31\u662F\u628A\u60F3\u529E\u6CD5\u628A\u81EA\u5DF1\u6784\u9020\u51FA\u6765</p><p>2\u3001\u5C06\u6784\u9020\u597D\u7684\u5DE6\u53F3\u5B50\u6811\u6302\u5230\u5BF9\u5E94\u7684\u6307\u9488</p><p><strong>\u6838\u5FC3\u70B9</strong>\uFF1A</p><p>\u6700\u6838\u5FC3\u7684\u5730\u65B9\u5C31\u662F\u7406\u89E3\u524D\u5E8F\u904D\u5386\u6570\u7EC4\u7684\u7B2C\u4E00\u4E2A\u662F\u6839\u8282\u70B9\uFF0C\u7136\u540E\u6839\u636E\u6839\u8282\u70B9\u627E\u5230\u4E2D\u5E8F\u904D\u5386\u6839\u8282\u70B9\u7684\u7D22\u5F15\uFF0C\u8FD9\u4E2A\u7D22\u5F15\u4E4B\u524D\u7684\u90E8\u5206\u5C31\u662F\u5F53\u524D\u6839\u8282\u70B9\u5DE6\u5B50\u6811\u7684\u957F\u5EA6\uFF0C\u5C31\u80FD\u786E\u8BA4\u524D\u5E8F\u904D\u5386\u6570\u7EC4\u4E2D\u5DE6\u5B50\u6811\u5143\u7D20\u5728\u672B\u5C3E\u7D22\u5F15\u4F4D\u7F6E</p><p><img src="https://user-images.githubusercontent.com/12841424/144740500-a1136065-2140-4f7b-8df1-7d7613894291.png" alt="image"></p><p>\u53C2\u8003\u4EE3\u7801\uFF1A\u6CE8\u610F[start,end]\u90FD\u662F\u91C7\u7528\u7684\u95ED\u533A\u95F4</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> 
                     inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preStart<span class="token punctuation">,</span> <span class="token keyword">int</span> preEnd<span class="token punctuation">,</span>
                           <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inStart<span class="token punctuation">,</span> <span class="token keyword">int</span> inEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>preStart <span class="token operator">&gt;</span> preEnd <span class="token operator">||</span> inStart <span class="token operator">&gt;</span> inEnd<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 1\u3001\u5B9A\u4F4D\u6839\u8282\u70B9\uFF08\u524D\u5E8F\u904D\u5386\u7B2C\u4E00\u4E2A\u5C31\u662F\u6839\u8282\u70B9\uFF09</span>
        <span class="token keyword">int</span> rootVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 2\u3001\u627E\u5230\u4E2D\u5E8F\u904D\u5386\u4E2D\u6839\u8282\u70B9\u4F4D\u7F6E</span>
        <span class="token keyword">int</span> rootIdx <span class="token operator">=</span> inStart<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> inStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> inEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> rootVal<span class="token punctuation">)</span><span class="token punctuation">{</span>
                rootIdx <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 3\u3001\u6784\u9020\u6839\u8282\u70B9</span>
        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4\u3001\u6784\u9020\u5DE6\u53F3\u5B50\u6811</span>
        <span class="token keyword">int</span> leftSize <span class="token operator">=</span> rootIdx <span class="token operator">-</span> inStart<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preStart <span class="token operator">+</span> leftSize<span class="token punctuation">,</span>
                          inorder<span class="token punctuation">,</span> inStart<span class="token punctuation">,</span> rootIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preStart <span class="token operator">+</span> leftSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preEnd<span class="token punctuation">,</span>
                          inorder<span class="token punctuation">,</span> rootIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>`,9);function t(e,o){return p}var l=s(a,[["render",t]]);export{l as default};
