import{c as n}from"./app.4db2b838.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h2 id="_8-\u5B57\u7B26\u4E32\u8F6C\u6362\u6574\u6570-atoi" tabindex="-1"><a class="header-anchor" href="#_8-\u5B57\u7B26\u4E32\u8F6C\u6362\u6574\u6570-atoi" aria-hidden="true">#</a> 8.\u5B57\u7B26\u4E32\u8F6C\u6362\u6574\u6570(atoi)</h2><h3 id="\u66B4\u529B" tabindex="-1"><a class="header-anchor" href="#\u66B4\u529B" aria-hidden="true">#</a> \u66B4\u529B</h3><p>1\u3001[start, end)\u8868\u793A\u6570\u5B57\u533A\u95F4\u5BF9\u5E94\u7684\u5B57\u7B26\u4E32\uFF0C\u4F8B\u5982<code>-123</code>\u3001<code>345</code>\u7B49</p><p>2\u3001\u5982\u679C\u662F\u5B57\u6BCD\u6216\u8005\u70B9\u53F7\u6216\u8005\u7A7A\u683C\uFF0C\u90A3\u5C31\u662F\u7EC8\u6B62\u4F4D\u7F6Eend</p><p>3\u3001\u5982\u679C\u6709\u8FDE\u7EED\u6B63\u8D1F\u53F7\uFF0C\u76F4\u63A5\u8FD4\u56DE0</p><p>4\u3001\u7B2C\u4E00\u4E2A\u6570\u5B57\u6216\u8005\u6570\u5B57\u524D\u7684\u4E00\u4E2A\u7B26\u53F7\u4F5C\u4E3A\u5F00\u59CB\u70B9(start)</p><p>5\u3001\u5982\u679C\u5DF2\u7ECF\u6709\u4E86start\uFF0C\u51FA\u73B0\u975E\u6570\u5B57\u5B57\u7B26\u76F4\u63A5\u8BA4\u4E3A\u7EC8\u6B62(end)</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// [start, end)\u8868\u793A\u6570\u5B57\u533A\u95F4</span>
        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">char</span> last_ch <span class="token operator">=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// \u5982\u679C\u662F\u5B57\u6BCD\u6216\u8005\u70B9\u53F7\u6216\u8005\u7A7A\u683C\uFF0C\u7ED3\u675F</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> ch <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token number">97</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">-</span><span class="token number">97</span> <span class="token operator">&lt;=</span> <span class="token number">25</span><span class="token punctuation">)</span>  <span class="token operator">||</span>  <span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token number">65</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">-</span><span class="token number">65</span> <span class="token operator">&lt;=</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                end <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// \u5982\u679C\u5DF2\u7ECF\u6709\u4E86start\uFF0C\u51FA\u73B0\u975E\u6570\u5B57\u5B57\u7B26\u76F4\u63A5\u7EC8\u6B62</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token number">48</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">-</span><span class="token number">48</span> <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                end <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// \u7B2C\u4E00\u4E2A\u6570\u5B57\u6216\u8005\u6570\u5B57\u524D\u7684\u4E00\u4E2A\u7B26\u53F7\u4F5C\u4E3A\u5F00\u59CB\u70B9</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">-</span><span class="token number">48</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ch<span class="token operator">-</span><span class="token number">48</span> <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    start <span class="token operator">=</span> i<span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>last_ch <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">||</span> last_ch <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        start <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// \u5982\u679C\u6709\u8FDE\u7EED\u6B63\u8D1F\u53F7\uFF0C\u76F4\u63A5\u8FD4\u56DE0</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>last_ch <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">||</span> last_ch <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// \u7ED3\u5C3E\u7684\u65F6\u5019\uFF0C\u8BBE\u7F6Eend</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                end <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            last_ch <span class="token operator">=</span> ch<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//System.out.println(&quot;start:&quot;+start +&quot;-end:&quot;+end);</span>
        
        <span class="token comment">// \u5904\u7406\u4E3A\u6570\u5B57\uFF0C\u9700\u8981\u4F7F\u7528BigInteger\u6765\u5904\u7406(long\u90FD\u4F1A\u6EA2\u51FA)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> end <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//System.out.println(&quot;str:&quot;+ str);</span>

            <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token number">4</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">BigInteger</span> bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bi <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bi <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> bi<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div><h3 id="\u81EA\u52A8\u673A" tabindex="-1"><a class="header-anchor" href="#\u81EA\u52A8\u673A" aria-hidden="true">#</a> \u81EA\u52A8\u673A</h3><p><strong>\u601D\u8DEF</strong></p><p>\u5B57\u7B26\u4E32\u5904\u7406\u7684\u9898\u76EE\u5F80\u5F80\u6D89\u53CA\u590D\u6742\u7684\u6D41\u7A0B\u4EE5\u53CA\u6761\u4EF6\u60C5\u51B5\uFF0C\u5982\u679C\u76F4\u63A5\u4E0A\u624B\u5199\u7A0B\u5E8F\uFF0C\u4E00\u4E0D\u5C0F\u5FC3\u5C31\u4F1A\u5199\u51FA\u6781\u5176\u81C3\u80BF\u7684\u4EE3\u7801\u3002\u56E0\u6B64\uFF0C\u4E3A\u4E86\u6709\u6761\u7406\u5730\u5206\u6790\u6BCF\u4E2A\u8F93\u5165\u5B57\u7B26\u7684\u5904\u7406\u65B9\u6CD5\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u81EA\u52A8\u673A\u8FD9\u4E2A\u6982\u5FF5\uFF1A</p><p>\u6211\u4EEC\u7684\u7A0B\u5E8F\u5728\u6BCF\u4E2A\u65F6\u523B\u6709\u4E00\u4E2A\u72B6\u6001 s\uFF0C\u6BCF\u6B21\u4ECE\u5E8F\u5217\u4E2D\u8F93\u5165\u4E00\u4E2A\u5B57\u7B26 c\uFF0C\u5E76\u6839\u636E\u5B57\u7B26 c \u8F6C\u79FB\u5230\u4E0B\u4E00\u4E2A\u72B6\u6001 s&#39;\u3002\u8FD9\u6837\uFF0C\u6211\u4EEC\u53EA\u9700\u8981\u5EFA\u7ACB\u4E00\u4E2A\u8986\u76D6\u6240\u6709\u60C5\u51B5\u7684\u4ECE s \u4E0E c \u6620\u5C04\u5230 s&#39; \u7684\u8868\u683C\u5373\u53EF\u89E3\u51B3\u9898\u76EE\u4E2D\u7684\u95EE\u9898\u3002</p><p><strong>\u7B97\u6CD5</strong></p><p>\u672C\u9898\u53EF\u4EE5\u5EFA\u7ACB\u5982\u4E0B\u56FE\u6240\u793A\u7684\u81EA\u52A8\u673A\uFF1A</p><p><img src="https://user-images.githubusercontent.com/12841424/152184891-50aa7a0b-bba0-4ddf-bad1-c6559351c156.png" alt="image"></p><p>\u6211\u4EEC\u4E5F\u53EF\u4EE5\u7528\u4E0B\u9762\u7684\u8868\u683C\u6765\u8868\u793A\u8FD9\u4E2A\u81EA\u52A8\u673A\uFF1A</p><p><img src="https://user-images.githubusercontent.com/12841424/152185506-9f9b2838-5243-4c48-aa37-2bac492e0db1.png" alt="image"></p><p>\u5177\u4F53\u4EE3\u7801\u5B9E\u73B0\u5982\u4E0B</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Automaton</span> automaton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Automaton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u5B57\u7B26\u4F5C\u4E3ADFS\u7684\u8F93\u5165\u5F00\u59CB\u5904\u7406</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            automaton<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u5408\u5E76\u7B26\u53F7\u548C\u6570\u503C</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>automaton<span class="token punctuation">.</span>sign <span class="token operator">*</span> automaton<span class="token punctuation">.</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Automaton</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7B26\u53F7</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// \u6570\u503C</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// \u8D77\u59CB\u72B6\u6001</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> state <span class="token operator">=</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// \u72B6\u6001\u56FEDFS</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;signed&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;in_number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;signed&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;in_number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;in_number&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;in_number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// \u72B6\u6001\u6D41\u8F6C</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">get_col</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;in_number&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6BCF\u591A\u4E00\u4F4D\u6570\u5B57\u8981\u5408\u5E76</span>
            ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> c <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>

            <span class="token comment">// \u5904\u7406\u6EA2\u51FA</span>
            ans <span class="token operator">=</span> sign <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;signed&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sign <span class="token operator">=</span> c <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u83B7\u53D6\u72B6\u6001\u5BF9\u5E94\u7684\u5217</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">get_col</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div>`,19);function t(o,e){return p}var u=s(a,[["render",t]]);export{u as default};
