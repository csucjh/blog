import{c as n}from"./app.4db2b838.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h2 id="_67-\u4E8C\u8FDB\u5236\u6C42\u548C" tabindex="-1"><a class="header-anchor" href="#_67-\u4E8C\u8FDB\u5236\u6C42\u548C" aria-hidden="true">#</a> 67.\u4E8C\u8FDB\u5236\u6C42\u548C</h2><h3 id="\u6A21\u62DF-\u4E00" tabindex="-1"><a class="header-anchor" href="#\u6A21\u62DF-\u4E00" aria-hidden="true">#</a> \u6A21\u62DF(\u4E00)</h3><p>\u57FA\u4E8E\u7B80\u5355\u7684\u6A21\u62DF\u601D\u8DEF\uFF0C\u6211\u4EEC\u7528\u4E00\u4E2A\u53D8\u91CFcarry\u8868\u793A\u4E0A\u4E00\u4F4D\u7684\u8FDB\u4F4D\uFF0C\u6211\u4EEC\u5206\u6790a, b\u4E24\u4E2A\u5B57\u7B26\u4E32\u7684\u5904\u7406\u60C5\u51B5</p><ul><li>\u5982\u679Ca\uFF0Cb\u4E24\u4E2A\u5B57\u7B26\u4E32\u6709\u4E00\u4E2A\u5904\u7406\u5B8C\u6BD5\u4E14\u8FDB\u4F4D\u5B8C\u6210\u5C31\u53EF\u4EE5\u7ED3\u675F\u4E86</li><li>\u5982\u679Ca\uFF0Cb\u4E24\u4E2A\u5B57\u7B26\u4E32\u90FD\u5904\u7406\u5B8C\u6BD5\u8FD8\u6709\u8FDB\u4F4D\u5219\u5C5E\u4E8E\u6EA2\u51FA\uFF0C\u9700\u8981\u5728\u6700\u524D\u9762\u8865\u4E00\u4F4D</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addBinary</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a_ch_arr <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b_ch_arr <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> a_n <span class="token operator">=</span> a_ch_arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> b_n <span class="token operator">=</span> b_ch_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch_arr <span class="token operator">=</span> a_n <span class="token operator">&gt;</span> b_n <span class="token operator">?</span> a_ch_arr <span class="token operator">:</span> b_ch_arr<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a_n<span class="token punctuation">,</span> b_n<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u662F\u5426\u9700\u8981\u8FDB\u4F4D</span>
        <span class="token keyword">boolean</span> carray <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> i_a <span class="token operator">=</span> a_n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i_b <span class="token operator">=</span> b_n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i_a <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">||</span> i_b <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">char</span> a_ch <span class="token operator">=</span> i_a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> a_ch_arr<span class="token punctuation">[</span>i_a<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span> b_ch <span class="token operator">=</span> i_b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> b_ch_arr<span class="token punctuation">[</span>i_b<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a_ch <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span> <span class="token operator">&amp;&amp;</span> b_ch <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// \u53EA\u6709\u4E24\u4E2A\u5B57\u7B26\u4E32\u76F8\u540C\u4F4D\u90FD\u662F1\u624D\u9700\u8981\u8FDB\u4F4D</span>
                ch_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> carray <span class="token operator">?</span> <span class="token char">&#39;1&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
                carray <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a_ch <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span> <span class="token operator">||</span> b_ch <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                ch_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> carray <span class="token operator">?</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                ch_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> carray <span class="token operator">?</span> <span class="token char">&#39;1&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
                carray <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            i_a<span class="token operator">--</span><span class="token punctuation">;</span> i_b<span class="token operator">--</span><span class="token punctuation">;</span>  i<span class="token operator">--</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i_a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i_b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>carray<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// \u6709\u4E00\u4E2A\u5B57\u7B26\u4E32\u5904\u7406\u5B8C\u6BD5\u4E14\u6CA1\u6709\u8FDB\u4F4D\uFF0C\u76F4\u63A5\u8FD4\u56DE</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>

        <span class="token comment">// \u5230\u8FD9\u91CC\u8BF4\u660E\u8FDB\u4F4D\u6EA2\u51FA</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> new_ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        new_ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>ch_arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> new_ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>new_ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="\u6A21\u62DF-\u4E8C" tabindex="-1"><a class="header-anchor" href="#\u6A21\u62DF-\u4E8C" aria-hidden="true">#</a> \u6A21\u62DF(\u4E8C)</h3><p>\u8BB0\u5B57\u7B26\u4E32a\uFF0Cb\u5F53\u524D\u4F4D\u7F6E\u5BF9\u9F50\u7684\u4E24\u4E2A\u4F4D\u4E3A a<sub>i</sub> , b<sub>i</sub>\uFF0C\u53D6\u5B57\u7B26\u4E32\u4E2D\u957F\u5EA6\u5927\u7684\u4E3A\u904D\u5386\u957F\u5EA6<em>n</em>=max{\u2223<em>a</em>\u2223,\u2223<em>b</em>\u2223}\uFF0C\u53EF\u4EE5\u6709\u4E00\u4E0B\u516C\u5F0F</p><ul><li>\u6BCF\u4E00\u4F4D\u7684\u7B54\u6848\u4E3A (carry + a<sub>i</sub> + b<sub>i</sub> ) % 2</li><li>\u4E0B\u4E00\u4F4D\u7684\u8FDB\u4F4D\u4E3A (carry + a<sub>i</sub> + b<sub>i</sub> ) / 2</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addBinary</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a_n <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b_n <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a_n<span class="token punctuation">,</span> b_n<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u8FDB\u4F4D\u503C</span>
        <span class="token keyword">int</span> carray <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token comment">// [0,n)\u533A\u95F4\u8868\u793A\u904D\u5386\u7684\u957F\u5EA6</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            carray <span class="token operator">+=</span> i <span class="token operator">&lt;</span> a_n <span class="token operator">?</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>a_n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            carray <span class="token operator">+=</span> i <span class="token operator">&lt;</span> b_n <span class="token operator">?</span> b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>b_n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>carray <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            carray <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>carray <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// \u5230\u8FD9\u91CC\u8BF4\u660E\u8FDB\u4F4D\u6EA2\u51FA</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>carray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,9);function t(o,e){return p}var r=s(a,[["render",t]]);export{r as default};
